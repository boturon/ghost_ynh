#!/bin/bash

#=================================================
# GENERIC START
#=================================================
# IMPORT GENERIC HELPERS
#=================================================

source _common.sh
source /usr/share/yunohost/helpers

#=================================================
# LOAD SETTINGS
#=================================================

app=$YNH_APP_INSTANCE_NAME

domain=$(ynh_app_setting_get $app domain)
path_url=$(ynh_app_setting_get $app path)
is_public=$(ynh_app_setting_get $app is_public)
final_path=$(ynh_app_setting_get $app final_path)
port=$(ynh_app_setting_get $app port)
db_name=$(ynh_app_setting_get $app db_name)
db_pwd=$(ynh_app_setting_get $app mysqlpwd)
#=================================================
# ENSURE DOWNWARD COMPATIBILITY
#=================================================

# Fix is_public as a boolean value
if [ "$is_public" = "Yes" ]; then
	ynh_app_setting_set $app is_public 1
	is_public=1
elif [ "$is_public" = "No" ]; then
	ynh_app_setting_set $app is_public 0
	is_public=0
fi

# If db_name doesn't exist, create it
if [ -z $db_name ]; then
	db_name=$(ynh_sanitize_dbid $app)
	ynh_app_setting_set $app db_name $db_name
fi


#=================================================
# BACKUP BEFORE UPGRADE THEN ACTIVE TRAP
#=================================================

# Backup the current version of the app
ynh_backup_before_upgrade
ynh_clean_setup () {
	# restore it if the upgrade fails
	ynh_restore_upgradebackup
}
# Exit if an error occurs during the execution of the script
ynh_abort_if_errors

#=================================================
# CHECK THE PATH
#=================================================

# Normalize the URL path syntax
path_url=$(ynh_normalize_url_path $path_url)

#=================================================
# STANDARD UPGRADE STEPS
#=================================================
# DOWNLOAD, CHECK AND UNPACK SOURCE
#=================================================

# Create a temporary directory
tmpdir="$(mktemp -d)"
# Backup the content folder to the temp dir
cp -ar "$final_path/content" "$tmpdir"


# Download, uncompress and patch the source 
sudo rm -R "$final_path"
# If final_path doesn't exist, create it
if [ -z $final_path ]; then
	final_path=/var/www/$app
	ynh_app_setting_set $app final_path $final_path
fi
tmpdir1="$(mktemp -d)"
sudo wget -O "$tmpdir1/ghost.zip" "https://ghost.org/zip/ghost-latest.zip"
unzip "$tmpdir1/ghost.zip" -d "$final_path"
sudo rm -R "$tmpdir1/ghost.zip"

# copy content folder back to the final_path
sudo cp -ar "$tmpdir/content" "${final_path}"
sudo rm -R "$tmpdir"

#=================================================
# SPECIFIC SETUP
#=================================================

# Copy configuration file
cp ../conf/config.production.json "$final_path/config.production.json"

#=================================================
# INSTALL DEPENDENCIES
#=================================================

# install nodejs
ynh_install_nodejs 8

# Install the dependencies with yarn
(
	cd "$final_path"
	yarn install 
	yarn global add knex-migrator

 
)

#=================================================
# MODIFY A CONFIG FILE
#=================================================

ynh_replace_string "__DOMAIN__" "$domain"      "$final_path/config.production.json"
ynh_replace_string "__PATH__"   "$path_url"     "$final_path/config.production.json"
ynh_replace_string "__DBNAME__" "$db_name"     "$final_path/config.production.json"
ynh_replace_string "__DBPWD__"  "$db_pwd"      "$final_path/config.production.json"
ynh_replace_string "__PORT__"   "$port"        "$final_path/config.production.json"

# Migrate tables in database
(
	cd "$final_path"
NODE_ENV=production knex-migrator init

)


#=================================================
# NGINX CONFIGURATION
#=================================================

# Create a dedicated nginx config
ynh_add_nginx_config
if [ "$path_url" != "/" ]
then
	ynh_replace_string "^#sub_path_only" "" "/etc/nginx/conf.d/$domain.d/$app.conf"
fi
ynh_store_file_checksum "/etc/nginx/conf.d/$domain.d/$app.conf"

#=================================================
# CREATE DEDICATED USER
#=================================================

# Create a system user
ynh_system_user_create $app

#=================================================
# SPECIFIC UPGRADE
#=================================================

# Verify the checksum and backup the file if it's different
ynh_backup_if_checksum_is_different "$final_path/config.production.json"
# Recalculate and store the config file checksum into the app settings
ynh_store_file_checksum "$final_path/config.production.json"

#=================================================
# SETUP SYSTEMD
#=================================================

# Create a dedicated systemd config
ynh_add_systemd_config
systemctl start "$app"

#=================================================
# GENERIC FINALIZATION
#=================================================
# SECURE FILES AND DIRECTORIES
#=================================================

# Set right permissions for curl installation
chown -R $app: $final_path

#=================================================
# SETUP SSOWAT
#=================================================

if [ $is_public -eq 0 ]
then	# Remove the public access
	ynh_app_setting_delete $app skipped_uris
fi
# Make app public if necessary
if [ $is_public -eq 1 ]
then
	# unprotected_uris allows SSO credentials to be passed anyway
	ynh_app_setting_set $app unprotected_uris "/"
fi

#=================================================
# RELOAD NGINX
#=================================================

systemctl reload nginx
service  "$app" restart
